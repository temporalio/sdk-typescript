name: Continuous Integration
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

jobs:
  # Build and test the project
  build-lint-test:
    strategy:
      fail-fast: true
      matrix:
        node: [12, 14]
        os: [ubuntu-latest, macos-latest] # TODO: support windows
        include:
          - os: ubuntu-latest
            node: 14
            docsTarget: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Print build information
        run: 'echo head_ref: ${{ github.head_ref }}, ref: ${{ github.ref }}, os: ${{ matrix.os }}, node: ${{ matrix.node }}, docsTarget: ${{ toJson(matrix.docsTarget) }}'
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - run: npm ci
      - run: npm run build
      - run: npm run lint
      - name: Get Temporal docker-compose.yml
        run: wget https://raw.githubusercontent.com/temporalio/docker-compose/main/docker-compose.yml
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      - name: Start Temporal Server
        run: docker-compose up -d
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      - name: Wait for Temporal Server
        run: node scripts/wait-on-temporal.js
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      - run: npm test
        env:
          # TODO: Run integration tests on MacOS once we get docker-compose running on the GH actions Mac instance
          RUN_INTEGRATION_TESTS: ${{ startsWith(matrix.os, 'ubuntu') }}
      - name: Build docs
        if: ${{ github.head_ref == 'main' && matrix.docsTarget }}
        run: npm run docs
      - name: Deploy docs
        if: ${{ github.head_ref == 'main' && matrix.docsTarget }}
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=packages/docs/build --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  # Cross compile native bridge code for Windows, Mac and Linux.
  # We use Mac here because it's harder to compile to Mac from other OSes.
  # Uploads the packages as a build artifact to be tested later.
  cross-compile:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-unknown-linux-gnu
          brew tap SergioBenitez/osxct
          brew install x86_64-unknown-linux-gnu
      - run: cp etc/mac-cargo-config.toml ~/.cargo/config.toml
      - uses: actions/setup-node@v1
        with:
          node-version: 14
      - run: npm ci
      - run: npm run build
      - name: Cross compile rust code
        run: npx lerna run --stream build-rust
        env:
          # aarch64 build fails on GH actions, skip it since we can't test it anyways
          # windows build temporarily disabled due to brew issues
          TEMPORAL_WORKER_BUILD_TARGETS: 'x86_64-apple-darwin:x86_64-unknown-linux-gnu'
      - run: node scripts/publish-to-verdaccio.js --registry-dir /tmp/registry
      - uses: actions/upload-artifact@v2
        with:
          name: packages
          path: /tmp/registry/storage
  # Tests that npm init @temporalio results in a working worker and client
  # Note that the instances used here don't have the Rust toolchain installed which ensures use of prebuilt libs.
  test-npm-init:
    strategy:
      fail-fast: true
      matrix:
        node: [12, 14]
        os: [ubuntu-latest] # TODO: add windows and macos-latest
    runs-on: ${{ matrix.os }}
    needs: cross-compile
    steps:
      # We don't need the core submodule here since bridge since we don't build the project
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      # No need to compile anything, we just need the package ./scripts and their dependencies
      - name: Install dependencies without compilation
        run: npm ci --ignore-scripts
      - uses: actions/download-artifact@v2
        with:
          name: packages
          path: /tmp/registry/storage
      # This runs npm init @temporalio from a local registry
      - run: node scripts/init-from-verdaccio.js --registry-dir /tmp/registry
      - name: Compile Typescript in example project
        run: npm run build
        working-directory: /tmp/registry/example
      - name: Get Temporal docker-compose.yml
        run: wget https://raw.githubusercontent.com/temporalio/docker-compose/main/docker-compose.yml
      - name: Start Temporal Server
        run: docker-compose up -d
      # Copy wait-on-temporal script to the example project where the built client package is installed
      - run: cp scripts/wait-on-temporal.js /tmp/registry/example
      - name: Wait for Temporal Server
        run: node wait-on-temporal.js
        working-directory: /tmp/registry/example
      - name: Test run a workflow
        run: node scripts/test-example.js --work-dir /tmp/registry/example
