name: Continuous Integration
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

jobs:
  # Build and test the project
  build-lint-test:
    strategy:
      fail-fast: true
      matrix:
        node: [14, 16]
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            node: 16
            docsTarget: true
          - os: windows-latest
            # See https://github.com/laverdet/isolated-vm/issues/264#issuecomment-967212960
            node: '16.10'
    runs-on: ${{ matrix.os }}
    steps:
      - name: Print build information
        run: 'echo head_ref: ${{ github.head_ref }}, ref: ${{ github.ref }}, os: ${{ matrix.os }}, node: ${{ matrix.node }}, docsTarget: ${{ toJson(matrix.docsTarget) }}'
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - run: npm ci
      - run: npm run build
      - run: npm run lint
      - name: Get Temporal docker-compose.yml
        run: wget https://raw.githubusercontent.com/temporalio/docker-compose/v1.13.0/docker-compose.yml
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      - name: Start Temporal Server
        run: docker-compose up -d
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      - name: Wait for Temporal Server
        run: npm run wait-namespace
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      - run: npm test
        env:
          # TODO: Run integration tests on MacOS once we get docker-compose running on the GH actions Mac instance (or use temporalite)
          RUN_INTEGRATION_TESTS: ${{ startsWith(matrix.os, 'ubuntu') }}
      - name: Build docs
        if: ${{ matrix.docsTarget }}
        run: npm run docs
      - name: Deploy prod docs
        if: ${{ github.ref == 'refs/heads/main' && matrix.docsTarget }}
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=packages/docs/build --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      - name: Deploy draft docs
        if: ${{ github.ref != 'refs/heads/main' && matrix.docsTarget }}
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=packages/docs/build
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  # Compile native bridge code and isolate extension for Windows, Mac and Linux.
  # Uploads the packages as a build artifact to be tested later.
  compile-binaries:
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-node@v1
        with:
          # See https://github.com/laverdet/isolated-vm/issues/264#issuecomment-967212960
          node-version: '16.10'
        if: ${{ matrix.os == 'windows-latest' }}
      - uses: actions/setup-node@v1
        with:
          node-version: 16
        if: ${{ matrix.os != 'windows-latest' }}
      - run: npm ci
      - run: npm run build
      - name: Cross compile rust code
        run: npx lerna run --stream build-rust -- -- --target ${{ matrix.target }}
      # Restore the CLI JS only on Windows because Windows build changes the
      # file attributes causing publish to think the change is uncommitted
      - run: git restore packages/create-project/cli.js
        if: ${{ matrix.os == 'windows-latest' }}
      - run: node scripts/publish-to-verdaccio.js --registry-dir /tmp/registry
      - uses: actions/upload-artifact@v2
        with:
          name: packages-${{ matrix.target }}
          path: /tmp/registry/storage
  # Tests that npm init @temporalio results in a working worker and client
  # Note that the instances used here don't have the Rust toolchain installed which ensures use of prebuilt libs.
  test-npm-init:
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            node: 16
            server: local
            sample: hello-world
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            # TODO: use latest 16 release when the ts-node/esm loader supports it
            node: '16.11'
            server: local
            sample: fetch-esm
          - os: macos-latest
            target: x86_64-apple-darwin
            node: 16
            server: cloud
            sample: hello-world-mtls
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            # See https://github.com/laverdet/isolated-vm/issues/264#issuecomment-967212960
            node: '16.10'
            server: cloud
            sample: hello-world-mtls

    runs-on: ${{ matrix.os }}
    needs: compile-binaries
    steps:
      # We don't need the core submodule here since bridge since we don't build the project
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      # No need to compile anything, we just need the package ./scripts and their dependencies
      - name: Install dependencies without compilation
        run: npm ci --ignore-scripts
      - uses: actions/download-artifact@v2
        with:
          name: packages-${{ matrix.target }}
          path: /tmp/registry/storage
      - run: node scripts/init-from-verdaccio.js --registry-dir /tmp/registry --sample https://github.com/temporalio/samples-typescript/tree/next/${{ matrix.sample }}
      - name: Get Temporal docker-compose.yml
        run: wget https://raw.githubusercontent.com/temporalio/docker-compose/v1.13.0/docker-compose.yml
        if: ${{ matrix.server == 'local' }}
      - name: Start Temporal Server
        run: docker-compose up -d
        if: ${{ matrix.server == 'local' }}
      # Copy wait-on-temporal script to the example project where the built client package is installed
      - run: cp scripts/wait-on-temporal.mjs /tmp/registry/example
        if: ${{ matrix.server == 'local' }}
      - name: Wait for Temporal Server
        run: node wait-on-temporal.mjs
        working-directory: /tmp/registry/example
        if: ${{ matrix.server == 'local' }}
      - name: Create certs dir
        # We write the certs to disk because it serves the sample
        run: node scripts/create-certs-dir.js
        env:
          TEMPORAL_CLIENT_CERT: ${{ secrets.TEMPORAL_CLIENT_CERT }}
          TEMPORAL_CLIENT_KEY: ${{ secrets.TEMPORAL_CLIENT_KEY }}
        if: ${{ matrix.server == 'cloud' }}
      - name: Test run a workflow
        run: node scripts/test-example.js --work-dir /tmp/registry/example
        env:
          # TODO: get a permanent cloud namespace for CI
          # These env vars are ignored by the local server example
          TEMPORAL_ADDRESS: roey.temporal-dev.tmprl.cloud
          TEMPORAL_NAMESPACE: roey.temporal-dev
          TEMPORAL_CLIENT_CERT_PATH: /tmp/temporal-certs/client.pem
          TEMPORAL_CLIENT_KEY_PATH: /tmp/temporal-certs/client.key
          TEMPORAL_TASK_QUEUE: ${{ format('{0}-{1}', matrix.os, matrix.node) }}
      - run: rm /tmp/temporal-certs/client.pem
        if: ${{ matrix.server == 'cloud' }}
      - run: rm /tmp/temporal-certs/client.key
        if: ${{ matrix.server == 'cloud' }}
