name: Continuous Integration

on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-test:
    strategy:
      fail-fast: true
      matrix:
        node: [14, 16]
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            node: 16
            docsTarget: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Print build information
        run: 'echo head_ref: ${{ github.head_ref }}, ref: ${{ github.ref }}, os: ${{ matrix.os }}, node: ${{ matrix.node }}, docsTarget: ${{ toJson(matrix.docsTarget) }}'
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      # Don't build during install phase since we're going to explicitly build
      - run: npm ci --ignore-scripts
      - run: npm run build
        env:
          BUILD_CORE_RELEASE: true

      # docker-compose
      - name: Checkout docker-compose repo
        uses: actions/checkout@v2
        with:
          repository: temporalio/docker-compose
          path: docker-compose
        if: ${{ startsWith(matrix.os, 'ubuntu') }}

      - name: Start Temporal Server
        run: docker-compose up -d
        working-directory: docker-compose
        if: ${{ startsWith(matrix.os, 'ubuntu') }}

      - name: Wait for Temporal Server
        run: npm run wait-namespace
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      # end:docker-compose

      - run: npm test
        env:
          # TODO: Run integration tests on MacOS / Windows probably using temporalite
          RUN_INTEGRATION_TESTS: ${{ startsWith(matrix.os, 'ubuntu') }}

      # Do docs stuff (only on one host)
      - name: Build docs
        if: ${{ matrix.docsTarget }}
        run: npm run docs
        env:
          ALGOLIA_API_KEY: ${{ secrets.ALGOLIA_API_KEY }}
      - name: Deploy prod docs
        if: ${{ github.ref == 'refs/heads/main' && matrix.docsTarget }}
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=packages/docs/build --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      - name: Deploy draft docs
        if: ${{ github.ref != 'refs/heads/main' && matrix.docsTarget }}
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=packages/docs/build
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  # Run TS linting and ts-prune to find unused code
  lint-and-prune:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-node@v1
        with:
          node-version: 16
      # Don't build during install phase since we don't need builds for linting
      - run: npm ci --ignore-scripts
      - run: npm run lint
      - run: npm run lint.prune

  # Compile native bridge code and isolate extension for Windows, Mac and Linux.
  # Uploads the packages as a build artifact to be tested later.
  compile-binaries:
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-18.04
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Add ${{ matrix.target }} rust target
        run: rustup target add ${{ matrix.target }}
      - name: Print libc version
        run: ldd --version
        if: ${{ matrix.os == 'ubuntu-18.04' }}
      - name: Install gcc-aarch64-linux-gnu
        run: sudo apt update && sudo apt install -y gcc-aarch64-linux-gnu
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
      - name: Copy cargo config
        run: cp ./etc/aarch64-linux-cargo-config.toml ~/.cargo/config.toml
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
      # Don't build during install phase since we're going to explicitly build
      - run: npm ci --ignore-scripts
      - name: Compile all non-rust code
        run: npm run ci-build-no-rust
      - name: Cross compile rust code
        env:
          CC_aarch64_unknown_linux_gnu: gcc-aarch64-linux-gnu
        run: npx lerna run --stream build-rust-release -- -- --target ${{ matrix.target }}
      # Restore the CLI JS only on Windows because Windows build changes the
      # file attributes causing publish to think the change is uncommitted
      - run: git restore packages/create-project/cli.js
        if: ${{ matrix.os == 'windows-latest' }}
      - run: node scripts/publish-to-verdaccio.js --registry-dir /tmp/registry
      - uses: actions/upload-artifact@v2
        with:
          name: packages-${{ matrix.target }}
          path: /tmp/registry/storage

  # Tests that npm init @temporalio results in a working worker and client
  # Note that the instances used here don't have the Rust toolchain installed which ensures use of prebuilt libs.
  test-npm-init:
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            node: 16
            server: local
            sample: hello-world
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            node: 16
            server: local
            sample: fetch-esm
          - os: macos-latest
            target: x86_64-apple-darwin
            node: 16
            server: cloud
            sample: hello-world-mtls
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            node: 16
            server: cloud
            sample: hello-world-mtls

    runs-on: ${{ matrix.os }}
    needs: compile-binaries
    env:
      TEMPORAL_CLIENT_CERT: ${{ secrets.TEMPORAL_CLIENT_CERT }}
      TEMPORAL_CLIENT_KEY: ${{ secrets.TEMPORAL_CLIENT_KEY }}
    steps:
      # We don't need the core submodule here since we don't build the project
      - uses: actions/checkout@v2
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}
      # No need to compile anything, we just need the package ./scripts and their dependencies
      - name: Install dependencies without compilation
        run: npm ci --ignore-scripts
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}
      - uses: actions/download-artifact@v2
        with:
          name: packages-${{ matrix.target }}
          path: /tmp/registry/storage
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}
      - run: node scripts/init-from-verdaccio.js --registry-dir /tmp/registry --sample https://github.com/temporalio/samples-typescript/tree/next/${{ matrix.sample }}
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}

      # docker-compose
      - name: Checkout docker-compose repo
        uses: actions/checkout@v2
        with:
          repository: temporalio/docker-compose
          path: docker-compose
        if: ${{ matrix.server == 'local' }}

      - name: Start Temporal Server
        run: docker-compose up -d
        working-directory: docker-compose
        if: ${{ matrix.server == 'local' }}

      # Copy wait-on-temporal script to the example project where the built client package is installed
      - run: cp scripts/wait-on-temporal.mjs /tmp/registry/example
        if: ${{ matrix.server == 'local' }}

      - name: Wait for Temporal Server
        run: node wait-on-temporal.mjs
        working-directory: /tmp/registry/example
        if: ${{ matrix.server == 'local' }}
      # end:docker-compose

      - name: Create certs dir
        # We write the certs to disk because it serves the sample
        run: node scripts/create-certs-dir.js
        if: ${{ matrix.server == 'cloud' && env.TEMPORAL_CLIENT_CERT != '' }}
      - name: Test run a workflow
        run: node scripts/test-example.js --work-dir /tmp/registry/example
        env:
          # TODO: get a permanent cloud namespace for CI
          # These env vars are ignored by the local server example
          TEMPORAL_ADDRESS: roey.temporal-dev.tmprl.cloud
          TEMPORAL_NAMESPACE: roey.temporal-dev
          TEMPORAL_CLIENT_CERT_PATH: /tmp/temporal-certs/client.pem
          TEMPORAL_CLIENT_KEY_PATH: /tmp/temporal-certs/client.key
          TEMPORAL_TASK_QUEUE: ${{ format('{0}-{1}-{2}', matrix.os, matrix.node, matrix.target) }}
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}
      - run: rm /tmp/temporal-certs/client.pem
        if: ${{ matrix.server == 'cloud' && env.TEMPORAL_CLIENT_CERT != '' }}
      - run: rm /tmp/temporal-certs/client.key
        if: ${{ matrix.server == 'cloud' && env.TEMPORAL_CLIENT_CERT != '' }}

  # Runs the sdk features repo tests with this repo's current SDK code
  sdk-features-tests:
    uses: temporalio/sdk-features/.github/workflows/typescript.yaml@main
    with:
      typescript-repo-path: ${{github.event.pull_request.head.repo.full_name}}
      typescript-repo-ref: ${{github.event.pull_request.head.ref}}

  stress-tests:
    # GH actions is a bit limited here and won't accept the current ref.
    # When changing stress.yaml, make sure to update the branch name below.
    uses: temporalio/sdk-typescript/.github/workflows/stress.yml@main
    with:
      test-type: ci-stress
      test-timeout-minutes: 20
