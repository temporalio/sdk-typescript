name: Continuous Integration
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

jobs:
  build-lint-test: # Build and test the project
    strategy:
      fail-fast: true
      matrix:
        node: [12, 14]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - run: npm ci
      - run: npm run build
      - run: npm run lint
      - name: Get Temporal docker-compose.yml
        run: wget https://raw.githubusercontent.com/temporalio/docker-compose/main/docker-compose.yml
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      - name: Start Temporal Server
        run: docker-compose up -d
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      - name: Wait for Temporal Server
        run: node scripts/wait-on-temporal.js
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      - run: npm test
        env:
          RUN_INTEGRATION_TESTS: ${{ startsWith(matrix.os, 'ubuntu') }}
  cross-compile: # Cross compile native bridge code for Windows, Mac and Linux
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-pc-windows-gnu
          rustup target add x86_64-unknown-linux-gnu
          brew tap SergioBenitez/osxct
          brew install x86_64-unknown-linux-gnu
          brew install mingw-w64
      - run: cp etc/mac-cargo-config.toml ~/.cargo/config.toml
      - uses: actions/setup-node@v1
        with:
          node-version: 14
      - run: npm ci
      - run: npm run build
      # aarch64 build fails on GH actions, skip it
      - run: npx lerna run --stream build-rust
        env:
          TEMPORAL_WORKER_BUILD_TARGETS: 'x86_64-apple-darwin:x86_64-unknown-linux-gnu:x86_64-pc-windows-gnu'
      - run: node scripts/publish-to-verdaccio.js --registry-dir /tmp/registry
      - uses: actions/upload-artifact@v2
        with:
          name: packages
          path: /tmp/registry/storage
  test-npm-init: # Tests that npm init @temporalio results in a working worker and client
    strategy:
      fail-fast: true
      matrix:
        node: [12, 14]
        os: [ubuntu-latest]
        # TODO: os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    needs: cross-compile
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Install dependencies without compilation
        run: npm ci --ignore-scripts
      - uses: actions/download-artifact@v2
        with:
          name: packages
          path: /tmp/registry/storage
      - run: node scripts/init-from-verdaccio.js --registry-dir /tmp/registry
      - run: npm run build
        working-directory: /tmp/registry/example
      - name: Get Temporal docker-compose.yml
        run: wget https://raw.githubusercontent.com/temporalio/docker-compose/main/docker-compose.yml
      - name: Start Temporal Server
        run: docker-compose up -d
      - name: Wait for Temporal Server
        run: node scripts/wait-on-temporal.js
      - run: node scripts/test-example.js --work-dir /tmp/registry/example
