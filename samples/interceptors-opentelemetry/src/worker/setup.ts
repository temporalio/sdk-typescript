import { ExportResult } from '@opentelemetry/core';
import { ConsoleSpanExporter, ReadableSpan } from '@opentelemetry/tracing';
import { NodeSDK } from '@opentelemetry/sdk-node';
import { SpanName } from '@temporalio/interceptors-opentelemetry/lib/workflow';

// Only print the spans generated by interceptors
export const instrumentedSpans = new Set<string>(Object.values(SpanName));

export class SpanExporter extends ConsoleSpanExporter {
  public export(spans: ReadableSpan[], resultCallback: (result: ExportResult) => void): void {
    const filtered = spans.filter(({ name }) => instrumentedSpans.has(name));
    super.export(filtered, resultCallback);
  }
}

export interface OpentelemtryEnv {
  sdk: NodeSDK;
  exporter: SpanExporter;
}

export async function setupOpentelemetry(): Promise<OpentelemtryEnv> {
  const exporter = new SpanExporter();
  const sdk = new NodeSDK({ traceExporter: exporter });
  await sdk.start();
  return { sdk, exporter };
}
